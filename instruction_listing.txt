Instruction listing

|-----------|-------------------|-----|-----|-----|
| MNEMONIC  | B0                | B1  | B2  | B*  |
|-----------|-------------------|-----|-----|-----|
| output    | 0 0 0 0   aaaa    |     |     |     | Output small register A
| outputw   | 0 0 0 1   aaaa    |     |     |     | Output wide register A
| loadmem   | 0 0 1 0   aaaa    | M M | M M |     | Load small value at memory address M into small register A
| loadmemw  | 0 0 1 1   aaaa    | M M | M M |     | Load wide value at memory address M into wide register A
| storemem  | 0 1 0 0   aaaa    | M M | M M |     | Store value of small register A at memory address M
| storememw | 0 1 0 1   aaaa    | M M | M M |     | Store value of wide register A at memory address M
| jmp       | 0 1 1 0   ----    | M M | M M |     | Unconditional branch to memory address M
| jo        | 0 1 1 1   aaaa    | M M | M M |     | Conditional branch to memory address M if small register A is odd
| - - - - - | - - - - - - - - - | - - | - - | - - |
| [OP]      | 1 0 0 s   ssss    | A B |     |     | Perform small binary operation S (see below) on registers A and B, storing result in A
| [OP]w     | 1 0 1 s   ssss    | A B |     |     | Perform wide binary operation S (see below) on registers A and B, storing result in A
| [OP]imm   | 1 1 0 s   ssss    | A B | V V | * * | Perform small binary operation S (see below) on register B and small immediate value V, storing the result in A
| [OP]immw  | 1 1 1 s   ssss    | A B | V V | * * | Perform wide binary operation S (see below) on register B and wide immediate value V, storing the result in A
|-----------|-------------------|-----|-----|-----|

Binary register operations
    Read values of registers A and B, compute result, store result in register A

|----------|-----------|-------------------------------|
| MNEMONIC | CODE      | EXPLANATION                   |
|----------|-----------|-------------------------------|
| copy     | 0 0 0 0 0 | B                             |
| not      | 0 0 0 0 1 | ~B                            |
| neg      | 0 0 0 1 0 | MAX - B                       |
| reverse  | 0 0 0 1 1 | reverse(B)                    |
| numones  | 0 0 1 0 0 | byteswap(B)                   |
| numzeros | 0 0 1 0 1 | popcount(B)                   |
| and      | 0 0 1 1 0 | A & B                         |
| or       | 0 0 1 1 1 | A | B                         |
| xor      | 0 1 0 0 0 | A ^ B                         |
| shl      | 0 1 0 0 1 | A << B                        |
| shlm     | 0 1 0 1 0 | A << (B % BITS)               |
| shr      | 0 1 0 1 1 | A >> B                        |
| shrm     | 0 1 1 0 0 | A >> (B % BITS)               |
| rotl     | 0 1 1 0 1 | rotl(A, B)                    |
| rotr     | 0 1 1 1 0 | rotr(A, B)                    |
| addc     | 0 1 1 1 1 | min(A + B, MAX)               |
| addm     | 1 0 0 0 0 | (A + B) & MAX                 |
| subc     | 1 0 0 0 1 | max(A - B, 0)                 |
| subm     | 1 0 0 1 0 | (A - B) & MAX                 |
| absdiff  | 1 0 0 1 1 | abs(B - A)                    |
| mulc     | 1 0 1 0 0 | min(A * B, MAX)               |
| mulm     | 1 0 1 0 1 | (A * B) & MAX                 |
| div      | 1 0 1 1 0 | A / max(B, 1)                 |
| mod      | 1 0 1 1 1 | A % max(B, 1)                 |
| powm     | 1 1 0 0 0 | pow(A, B) & MAX               |
| powc     | 1 1 0 0 1 | min(pow(A, B), MAX)           |
| gt       | 1 1 0 1 0 | A > B                         |
| ge       | 1 1 0 1 1 | A >= B                        |
| lt       | 1 1 1 0 0 | A < B                         |
| le       | 1 1 1 0 1 | A <= B                        |
| eq       | 1 1 1 1 0 | A == B                        |
| ne       | 1 1 1 1 1 | A != B                        |
|----------|-----------|-------------------------------|
